diff --git a/src/verify.rs b/src/verify.rs
index 68ba6ce..2a15a19 100644
--- a/src/verify.rs
+++ b/src/verify.rs
@@ -1,4 +1,4 @@
-use crate::exercise::{CompiledExercise, Exercise, Mode, State};
+use crate::exercise::{CompiledExercise, Exercise, Mode};
 use console::style;
 use indicatif::{ProgressBar, ProgressStyle};
 use std::env;
@@ -16,9 +16,10 @@ pub fn verify<'a>(
     let (num_done, total) = progress;
     let bar = ProgressBar::new(total as u64);
     let mut percentage = num_done as f32 / total as f32 * 100.0;
-    bar.set_style(ProgressStyle::default_bar()
-        .template("Progress: [{bar:60.green/red}] {pos}/{len} {msg}")
-        .progress_chars("#>-")
+    bar.set_style(
+        ProgressStyle::default_bar()
+            .template("Progress: [{bar:60.green/red}] {pos}/{len} {msg}")
+            .progress_chars("#>-"),
     );
     bar.set_position(num_done as u64);
     bar.set_message(format!("({:.1} %)", percentage));
@@ -143,10 +144,16 @@ fn compile<'a, 'b>(
 }
 
 fn prompt_for_completion(exercise: &Exercise, prompt_output: Option<String>) -> bool {
-    let context = match exercise.state() {
-        State::Done => return true,
-        State::Pending(context) => context,
-    };
+    /*
+        let context = match exercise.state() {
+            State::Done => return true,
+            State::Pending(context) => context,
+        };
+    */
+
+    if exercise.finish() {
+        return true;
+    }
 
     match exercise.mode {
         Mode::Compile => success!("Successfully ran {}!", exercise),
@@ -183,28 +190,28 @@ fn prompt_for_completion(exercise: &Exercise, prompt_output: Option<String>) ->
         println!("{}", separator());
         println!();
     }
-
-    println!("You can keep working on this exercise,");
-    println!(
-        "or jump into the next one by removing the {} comment:",
-        style("`I AM NOT DONE`").bold()
-    );
-    println!();
-    for context_line in context {
-        let formatted_line = if context_line.important {
-            format!("{}", style(context_line.line).bold())
-        } else {
-            context_line.line.to_string()
-        };
-
+    /*
+        println!("You can keep working on this exercise,");
         println!(
-            "{:>2} {}  {}",
-            style(context_line.number).blue().bold(),
-            style("|").blue(),
-            formatted_line
+            "or jump into the next one by removing the {} comment:",
+            style("`I AM NOT DONE`").bold()
         );
-    }
-
+        println!();
+        for context_line in context {
+            let formatted_line = if context_line.important {
+                format!("{}", style(context_line.line).bold())
+            } else {
+                context_line.line.to_string()
+            };
+
+            println!(
+                "{:>2} {}  {}",
+                style(context_line.number).blue().bold(),
+                style("|").blue(),
+                formatted_line
+            );
+        }
+    */
     false
 }
 
