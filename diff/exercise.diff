diff --git a/src/exercise.rs b/src/exercise.rs
index 2cde4e1..3bd4796 100644
--- a/src/exercise.rs
+++ b/src/exercise.rs
@@ -3,7 +3,7 @@ use serde::Deserialize;
 use std::env;
 use std::fmt::{self, Display, Formatter};
 use std::fs::{self, remove_file, File};
-use std::io::Read;
+use std::io::{Read, Write};
 use std::path::PathBuf;
 use std::process::{self, Command};
 
@@ -200,6 +200,44 @@ path = "{}.rs""#,
         }
     }
 
+    pub fn finish(&self) -> bool {
+        let mut source_file =
+            File::open(&self.path).expect("We were unable to open the exercise file!");
+
+        let source = {
+            let mut s = String::new();
+            source_file
+                .read_to_string(&mut s)
+                .expect("We were unable to read the exercise file!");
+            s
+        };
+
+        let re = Regex::new(I_AM_DONE_REGEX).unwrap();
+
+        if !re.is_match(&source) {
+            return true;
+        }
+
+        let lines: String = source
+            .lines()
+            .filter(|&line| !re.is_match(line))
+            .map(|line| format!("{}\n", line).to_string())
+            .collect();
+
+        let msg = format!(
+            "We were unable to write to the exercise file! {}",
+            self.path.to_string_lossy()
+        )
+        .to_string();
+
+        source_file =
+            File::create(&self.path).expect("We were unable to create the exercise file!");
+
+        source_file.write_all(lines.as_bytes()).expect(msg.as_str());
+
+        false
+    }
+
     pub fn state(&self) -> State {
         let mut source_file =
             File::open(&self.path).expect("We were unable to open the exercise file!");
